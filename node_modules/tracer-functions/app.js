// app.js

const { traceObject, setMode, enableTracing, finalizeTracing, TRACER_MODE } = require('./tracer');
const myModule = require('./myModule');
// You'll need to use dynamic import for chalk here too if app.js uses chalk directly
let chalk;
(async () => {
    chalk = (await import('chalk')).default;
    // Your main app logic can be here, or ensure calls that use chalk are delayed
    // For this example, if the app itself uses chalk directly in a synchronous way,
    // this might cause an issue for the very first chalk.magenta.bold call.
    // A robust solution would be to move the entire app logic into an async function as well.
    startApplication();
})();


async function startApplication() { // Wrap main logic in an async function
    // --- Configure Tracer (based on environment variable or directly) ---
    const mode = process.env.TRACER_MODE || TRACER_MODE.REGULAR;
    setMode(mode);

    enableTracing(true);

    // --- Inject Tracing ---
    const myModulePath = require.resolve('./myModule');
    traceObject(myModule, myModulePath, myModule.__functionLineMap);

    function performComplexOperation(data) {
        if (chalk) console.log(chalk.cyan("  Processing data..."));
        else console.log("  Processing data...");
        const intermediate = data * 10;
        const final = myModule.calculate(intermediate);
        return final / 2;
    }

    const appFunctions = { performComplexOperation };
    const appPath = __filename;
    const appFnLineMap = {
        performComplexOperation: 22
    };
    traceObject(appFunctions, appPath, appFnLineMap);
    // --- End Tracing Injection ---

    if (chalk) console.log(chalk.magenta.bold("\n--- Application Start ---\n"));
    else console.log("\n--- Application Start ---\n");


    // --- Main Application Logic ---
    if (chalk) console.log(chalk.yellowBright("Running first scenario: Valid inputs"));
    else console.log("Running first scenario: Valid inputs");

    const result1 = myModule.doSomething('hello', 123);
    if (chalk) console.log(chalk.bold("Result 1:"), result1, "\n");
    else console.log("Result 1:", result1, "\n");


    if (chalk) console.log(chalk.yellowBright("Running second scenario: Local function call"));
    else console.log("Running second scenario: Local function call");

    const complexResult = appFunctions.performComplexOperation(5);
    if (chalk) console.log(chalk.bold("Complex Result:"), complexResult, "\n");
    else console.log("Complex Result:", complexResult, "\n");


    if (chalk) console.log(chalk.yellowBright("Running third scenario: Error handling"));
    else console.log("Running third scenario: Error handling");

    try {
        myModule.processText(null);
    } catch (e) {
        if (chalk) console.error(chalk.red.bold("Caught expected error in app.js for processText(null):"), e.message, "\n");
        else console.error("Caught expected error in app.js for processText(null):", e.message, "\n");
    }

    if (chalk) console.log(chalk.magenta.bold("--- Application End ---\n"));
    else console.log("--- Application End ---\n");

    // --- Finalize Tracing ---
    finalizeTracing();
}

// myModule.js remains unchanged.