const chalk = require('chalk');
const stringSimilarity = require('string-similarity');

class PowerCli {
  constructor() {
    this.config = {};
    this.aliases = {};
    this.types = {};
    this.switches = new Set();
    this.lastParams = {}; // ← used for $var interpolation
  }

  use(config) {
    this.config = config;
  }

  set_aliases(aliasMap) {
    this.aliases = aliasMap;
  }

  set_types(typeMap) {
    this.types = typeMap;
  }

  set_switches(switchArr) {
    switchArr.forEach(sw => this.switches.add(sw.toLowerCase()));
  }

  parse(args) {
    if (args.includes('--help') || args.length === 0) {
      this._print_help();
      return;
    }

    const [commandOrParam, ...rest] = args;

    if (typeof this.config[commandOrParam] === 'function') {
      const paramMap = this._parse_params(rest);
      return this._execute(this.config[commandOrParam], paramMap);
    }

    const paramMap = this._parse_params(args);
    if (typeof this.config.params === 'function') {
      return this._execute(this.config.params, paramMap);
    }

    const allCommands = Object.keys(this.config).filter(k => typeof this.config[k] === 'function');
const suggestion = stringSimilarity.findBestMatch(commandOrParam, allCommands).bestMatch;

if (suggestion.rating > 0.4) {
  this.write_output(`Unknown command: '${commandOrParam}'. Did you mean '${suggestion.target}'?`, { color: 'yellow', italic: true });
} else {
  this.write_output(`Unknown command: '${commandOrParam}'. No similar command found.`, { color: 'red' });
}
  }

  _parse_params(args) {
    const map = {};
    for (let i = 0; i < args.length; i++) {
      let key = args[i];
      if (!key.startsWith('-')) continue;

      key = key.replace(/^-+/, '');
      if (this.aliases[key]) key = this.aliases[key];

      const type = this.types[key];

      if (this.switches.has(key.toLowerCase())) {
        map[`$${key}`] = true;
        continue;
      }

      let val = args[i + 1];
      if (!val || val.startsWith('-')) {
        map[`$${key}`] = true;
        continue;
      }

      i++;

      if (type === 'number') {
        val = Number(val);
        if (isNaN(val)) val = 0;
      }

      map[`$${key}`] = val;
    }

    return map;
  }

  _execute(fn, paramMap) {
    this.lastParams = paramMap; // store current param context
    const fnStr = fn.toString();
    const paramNames = fnStr.match(/\((.*?)\)/)?.[1]?.split(',').map(x => x.trim()) || [];
    const args = paramNames.map(name => paramMap[name] ?? undefined);
    return fn(...args);
  }

  write_output(msg, opts = {}) {
    if (typeof msg === 'string') {
      msg = msg.replace(/\$[a-zA-Z_]\w*/g, match => {
        return this.lastParams[match] ?? match;
      });
    }

    let styled = msg;
    if (opts.color && chalk[opts.color]) styled = chalk[opts.color](styled);
    if (opts.bold) styled = chalk.bold(styled);
    if (opts.italic) styled = chalk.italic(styled);

    console.log(styled);
  }

  _print_help() {
    console.log(chalk.bold('\n📘 powerCli Help:'));
    const fnNames = Object.keys(this.config);
    fnNames.forEach(fn => {
      const args = this.config[fn].toString().match(/\((.*?)\)/)?.[1];
      console.log(chalk.cyan(`› ${fn} ${args ? args : ''}`));
    });
    console.log('\nUse like: node script.js greet -name Sarah -mood happy\n');
  }
}

module.exports = new PowerCli();
